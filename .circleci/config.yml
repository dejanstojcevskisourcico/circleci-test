version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.4.0

jobs:

  setup-job:
    description: |
      This setup job is used to dynamicaly generate pipeline parameters passed to config_main.yml
      These actions are extracted from git commit message and scheduled pipeline parameters

    executor: continuation/default

    steps:
      - checkout

      - when:
          condition:
            or:
              - equal: [ webhook, << pipeline.trigger_source >> ]
              - equal: [ api, << pipeline.trigger_source >> ]
          steps:
            - run:
                name: Filter workflows based on git commit message
                description: |
                  This step is extracting strings from git commit message
                  and populating env variables which in turn are used as input pipeline parameters to config_main.yml
                  This step is triggered by webhooks or api only - when pushing new commit to github repo or directly triggering from circleci api call.
                  It will NOT be triggered by scheduled pipelines from circleci app.
                command: |
                  COMMIT_MSG=$(git log --format=%B -n 1 $CIRCLE_SHA1)
                  ACTION_TYPE=$(echo $COMMIT_MSG | perl -ne '/^([a-z]+?)=/; print (defined($1) ? $1 : " ")')

                  case $ACTION_TYPE in
                    deploy)
                      read -r DEPLOY_TYPE < <(echo $COMMIT_MSG | perl -lne '/^deploy=([a-z]+?)(:|$)/; print (defined($1) ? $1 : " ")')
                      case $DEPLOY_TYPE in
                        true)
                          echo "export TERRAFORM_DEPLOY_TRUE=true" >> $BASH_ENV
                          echo "Will execute terraform_deploy_true workflow on branch << pipeline.git.branch >>"
                          ;;
                        service)
                          read -r DEPLOY_PARAMS < <(echo $COMMIT_MSG | perl -lne '/^deploy=service:([a-zA-Z_][a-zA-Z0-9_\-\.]*)$/; print (defined($1) ? $1 : " ")')
                          if [[ ! -z "$DEPLOY_PARAMS" ]]; then
                            echo "export TERRAFORM_DEPLOY_SERVICE=true" >> $BASH_ENV
                            echo "export TERRAFORM_DEPLOY_SERVICE_TARGET=module.${DEPLOY_PARAMS}" >> $BASH_ENV
                            echo "Will execute terraform_deploy_service workflow with target on branch << pipeline.git.branch >>"
                          else
                            echo "No deploy workflow service defined for message:"
                            echo ${COMMIT_MSG}
                            echo 'Target parameter must not be empty and must conform to terraform identifier syntax rules'
                          fi
                          ;;
                        *)
                          echo "No deploy workflow defined for message:"
                          echo ${COMMIT_MSG}
                          echo "Valid deploy types are: true, service"
                          ;;
                      esac
                      ;;
                    *)
                      echo "No workflow defined for message:"
                      echo ${COMMIT_MSG}
                      echo "Valid action types are: deploy="
                      ;;
                  esac

      - when:
          condition:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
          steps:
            - run:
                name: Filter workflows based on scheduled pipeline name
                description: |
                  This step is fetching schedule name and populate env variable with it.
                  It is used to filter workflows in config_main.yml.
                  This step will be triggered ONLY by scheduled pipeline setting in circleci app.
                command: |
                  SCHEDULE_NAME=<< pipeline.schedule.name >>
                  echo "Will execute schedule << pipeline.schedule.name >> on branch << pipeline.git.branch >>"
                  
      - run: 
          name: Create JSON parameter file
          description: This JSON parameter file contains all parameters passed to config_main.yml file
          command: |
            jq -n \
                --argjson terraform_deploy_true ${TERRAFORM_DEPLOY_TRUE:=false}  \
                --argjson terraform_deploy_service ${TERRAFORM_DEPLOY_SERVICE:=false} \
                --arg terraform_deploy_service_target ${TERRAFORM_DEPLOY_SERVICE_TARGET:=null} \
                --arg schedule_name ${SCHEDULE_NAME:=null} \
                '
                {
                  "terraform_deploy_true": $terraform_deploy_true,
                  "terraform_deploy_service": $terraform_deploy_service,
                  "terraform_deploy_service_target": $terraform_deploy_service_target,
                  "schedule_name": $schedule_name
                }
                ' \
            >> .circleci/parameters.json
            echo "Parameters passed to config_main.yml:"
            cat .circleci/parameters.json
            
      - continuation/continue:
          parameters: .circleci/parameters.json
          configuration_path: .circleci/config_main.yml

workflows:
  setup-workflow:
    jobs:
      - setup-job