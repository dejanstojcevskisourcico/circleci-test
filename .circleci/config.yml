version: 2.1

executors:
  deploy-executor:
    machine:
      #image: ubuntu-2204:2023.04.2
      image: ubuntu-2004:202201-02
     
commands:

  install-openvpn:
    description: "Commands to install OpenVPN client on a machine executor"
    steps:
      - run:
          name: Install OpenVPN
          command: |
            sudo apt-get update
            sudo apt-get install openvpn openvpn-systemd-resolved
  
  check-ip-before-vpn-connection:
    description: "Commands to check IP before VPN connection"
    steps:
      - run:
          name: Check IP before VPN connection
          command: |
            ip a
            echo "Public IP before VPN connection is $(curl checkip.amazonaws.com)"
  
  check-ip-after-vpn-connection:
    description: "Commands to check IP after VPN connection"
    steps:
      - run:
          name: Check IP after VPN connection
          command: |
            counter=1
            until [ -f /tmp/openvpn.log ] && [ "$(grep -c "Initialization Sequence Completed" /tmp/openvpn.log)" != 0 ] || [ "$counter" -ge 5 ]; do
              ((counter++))
              echo "Attempting to connect to VPN server..."
              sleep 1;
            done

            if [ ! -f /tmp/openvpn.log ] || (! grep -iq "Initialization Sequence Completed" /tmp/openvpn.log); then
              printf "\nUnable to establish connection within the allocated time ---> Giving up.\n"
            else
              printf "\nVPN connected\n"
              printf "\nPublic IP is now %s\n" "$(curl -s http://checkip.amazonaws.com)"
            fi
  
  disconnect-openvpn:
    description: "Commands to disconnect VPN connection"
    steps:
      - run:
          name: Disconnect VPN connection
          command: |
            sudo killall openvpn || true
          when: always
  
  connect-openvpn:
    description: "Commands to configure OpenVPN client and make a VPN connection"
    steps:
      - run:
          name: VPN Setup and Connect
          background: true
          command: |
            echo $VPN_CLIENT_CONFIG | base64 --decode > /tmp/config.ovpn

            if grep -q auth-user-pass /tmp/config.ovpn; then
              if [ -z "${VPN_USER:-}" ] || [ -z "${VPN_PASSWORD:-}" ]; then
                echo "Your VPN client is configured with a user-locked profile. Make sure to set the VPN_USER and VPN_PASSWORD environment variables"
                exit 1
              else
                printf "$VPN_USER\\n$VPN_PASSWORD" > /tmp/vpn.login
              fi
            fi

            vpn_command=(sudo openvpn
              --config /tmp/config.ovpn
              --route 169.254.0.0 255.255.0.0 net_gateway
              --script-security 2
              --up /etc/openvpn/update-systemd-resolved --up-restart
              --down /etc/openvpn/update-systemd-resolved --down-pre
              --dhcp-option DOMAIN-ROUTE .)

            if grep -q auth-user-pass /tmp/config.ovpn; then
              vpn_command+=(--auth-user-pass /tmp/vpn.login)
            fi

            ET_phone_home=$(ss -Hnto state established '( sport = :ssh )' | head -n1 | awk '{ split($4, a, ":"); print a[1] }')
            echo $ET_phone_home

            if [ -n "$ET_phone_home" ]; then
              vpn_command+=(--route $ET_phone_home 255.255.255.255 net_gateway)
            fi

            for IP in $(host runner.circleci.com | awk '{ print $4; }')
              do
                vpn_command+=(--route $IP 255.255.255.255 net_gateway)
                echo $IP
            done

            for SYS_RES_DNS in $(systemd-resolve --status | grep 'DNS Servers'|awk '{print $3}')
              do
                vpn_command+=(--route $SYS_RES_DNS 255.255.255.255 net_gateway)
                echo $SYS_RES_DNS
            done

            "${vpn_command[@]}" > /tmp/openvpn.log

  setup-kubernetes-client:
    description: "Commands to install kubectl client including config files for production and staging clusters"
    parameters:
      kubectl_client_version:
        type: string
        default: v1.23.0
    steps:
      - kubernetes/install-kubectl:
          kubectl-version: << parameters.kubectl_client_version >>
      - when:
          condition:
            not:
              equal: [ production, << pipeline.git.branch >> ]
          steps:
            - kubernetes/install-kubeconfig:
                kubeconfig: KUBECONFIG_STAGING
      - when:
          condition:
            equal: [ production, << pipeline.git.branch >> ]
          steps:
            - kubernetes/install-kubeconfig:
                kubeconfig: KUBECONFIG_PRODUCTION

  setup-helm-client:
    description: "Commands to install and configure helm cli client"
    parameters:
      default_helm_plugin_dir:
        type: string
        default: "/home/circleci/.local/share/helm/plugins"
      helm_ssm_version:
        type: string
        default: 3.3.0
      helm_s3_version:
        type: string
        default: 0.14.0
      helm_client_version:
        type: string
        default: v3.12.0
    steps:
      - helm/install-helm-client:
          version: << parameters.helm_client_version >>
      - run:
          name: Configure helm client
          description: "Commands to configure helm cli client by installing plugins and initializing repository"
          command: |
            helm plugin install https://github.com/hypnoglow/helm-s3.git --version << parameters.helm_s3_version >>
            mkdir -p "<< parameters.default_helm_plugin_dir >>/helm-ssm" && curl -sL "https://github.com/codacy/helm-ssm/releases/download/<< parameters.helm_ssm_version >>/helm-ssm-linux.tgz" | tar xz -C "<< parameters.default_helm_plugin_dir >>/helm-ssm" && echo "Installed plugin: ssm"
            helm repo add vatbox-helm-repo s3://vatbox-helm-repo && echo "Repository vatbox-helm-repo added"
              

orbs:
  terraform: circleci/terraform@3.2.1
  helm: circleci/helm@2.0.1
  kubernetes: circleci/kubernetes@1.3.1
          
jobs:
  deploy:
    executor: deploy-executor
    steps:
      - checkout
      #- setup-kubernetes-client:
      #    kubectl_client_version: v1.23.0
      #- setup-helm-client:
      #    helm_client_version: v3.12.0
      #    helm_s3_version: 0.14.0
      #    helm_ssm_version: 3.3.0
      #- terraform/install:
      #    terraform_version: 1.4.6
      - install-openvpn
      - check-ip-before-vpn-connection
      - connect-openvpn
      - check-ip-after-vpn-connection
      - disconnect-openvpn

workflows:
  deploy_workflow:
    jobs:
      - deploy:
          context:
            - circleci-test